//
//  Generated by https://www.npmjs.com/package/amd-bundle
//
(function (factory) {

    if ((typeof define === 'function')  &&  define.amd)
        define('Profile', ["web-cell"], factory);
    else if (typeof module === 'object')
        return  module.exports = factory(require('web-cell'));
    else
        return  this['Profile'] = factory(this['web-cell']);

})(function (web_cell) {

function merge(base, path) {

    return (base + '/' + path).replace(/\/\//g, '/').replace(/[^/.]+\/\.\.\//g, '').replace(/\.\//g, function (match, index, input) {

        return input[index - 1] === '.' ? match : '';
    });
}

function outPackage(name) {
    return (/^[^./]/.test(name)
    );
}

    var require = _require_.bind(null, './');

    function _require_(base, path) {

        var module = _module_[
                outPackage( path )  ?  path  :  ('./' + merge(base, path))
            ],
            exports;

        if (! module.exports) {

            module.exports = { };

            var dependency = module.dependency;

            for (var i = 0;  dependency[i];  i++)
                module.dependency[i] = require( dependency[i] );

            exports = module.factory.apply(
                null,  module.dependency.concat(
                    _require_.bind(null, module.base),  module.exports,  module
                )
            );

            if (exports != null)  module.exports = exports;

            delete module.dependency;  delete module.factory;
        }

        return module.exports;
    }

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _module_ = {
    './index.css': {
        base: '.',
        dependency: [],
        factory: function factory(require, exports, module) {
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = "/** GitHub Profile Card - v2.0.1 **/\n/**\n * Github widget styles\n * ------------------------------------------------------------------\n */\n.gh-profile-card {\n    margin: auto;\n    width: 280px;\n    border-radius: 5px;\n    font-size: 16px;\n    font-family: Helvetica;\n    background: #FAFAFA;\n    border-width: 1px 1px 2px;\n    border-style: solid;\n    border-color: #DDD;\n    overflow: hidden;\n}\n.gh-profile-card a {\n    text-decoration: none;\n    color: #444;\n}\n.gh-profile-card a:hover {\n    color: #4183C4;\n}\n.gh-profile-card .name {\n    display: block;\n    font-size: 1.2em;\n    font-weight: bold;\n    color: #222;\n}\n.gh-profile-card .error {\n    font-size: 0.8em;\n    color: #444;\n    padding: 10px;\n}\n.gh-profile-card .error span {\n    display: block;\n    border-bottom: 1px solid #DDD;\n    padding-bottom: 5px;\n    margin-bottom: 5px;\n}\n.gh-profile-card .error span.remain {\n    text-align: center;\n    font-weight: bold;\n}\n.gh-profile-card .profile {\n    background: #FFF;\n    overflow: hidden;\n    padding: 15px 10px;\n    padding-bottom: 0;\n}\n.gh-profile-card .stats {\n    padding: 5px;\n}\n.gh-profile-card .languages {\n    position: relative;\n    clear: both;\n    margin: 0 -10px;\n    padding: 10px;\n    border-top: 1px solid #DEDEDE;\n    font-size: 0.8em;\n}\n.gh-profile-card .languages::before {\n    position: absolute;\n    top: -0.7em;\n    background: #FFF;\n    padding-right: 5px;\n    content: 'Top languages';\n    font-style: italic;\n    color: #555;\n}\n.gh-profile-card .languages li {\n    display: inline-block;\n    color: #444;\n    font-weight: bold;\n    margin-left: 10px;\n}\n.gh-profile-card .languages li::after {\n    content: '\\2022';\n    margin-left: 10px;\n    color: #999;\n}\n.gh-profile-card .languages li:last-child::after {\n    content: '';\n}\n.gh-profile-card .followMe {\n    margin-top: 3px;\n}\n.gh-profile-card .follow-button {\n    font-size: 0.8em;\n    color: #333;\n    float: left;\n    padding: 0 10px;\n    line-height: 1.5em;\n    border: 1px solid #D5D5D5;\n    border-radius: 3px;\n    font-weight: bold;\n    background: #EAEAEA;\n    background-image: linear-gradient(#FAFAFA, #EAEAEA);\n    text-shadow: 0 1px 0 rgba(255, 255, 255, 0.9);\n    -moz-user-select: none;\n    -webkit-user-select: none;\n    -ms-user-select: none;\n    user-select: none;\n}\n.gh-profile-card .follow-button:hover {\n    color: inherit;\n    background: #DDD;\n    background-image: linear-gradient(#EEE, #DDD);\n}\n.gh-profile-card .followMe span {\n    position: relative;\n    background: #FFF;\n    margin-left: 8px;\n    padding: 0 5px;\n    color: #444;\n    font-size: 0.8em;\n    border: 1px solid;\n    border-color: #BBB;\n}\n.gh-profile-card .followMe span::before {\n    content: '';\n    position: absolute;\n    display: block;\n    width: 5px;\n    height: 5px;\n    left: -4px;\n    top: 30%;\n    background: inherit;\n    border-left: 1px solid;\n    border-top: 1px solid;\n    border-color: inherit;\n    transform: rotate(-45deg);\n}\n.gh-profile-card .avatar {\n    width: 64px;\n    height: 64px;\n    float: left;\n    margin: 0 10px 15px 0;\n    margin-left: 0;\n    border-radius: 5px;\n    box-shadow: 0 0 2px 0 #DDD;\n}\n.gh-profile-card .repos {\n    clear: both;\n}\n.gh-profile-card .repos .header {\n    display: block;\n    width: 100%;\n    font-weight: bold;\n    background: #EAEAEA;\n    background-image: linear-gradient(#FAFAFA, #EAEAEA);\n    border: solid #D5D5D5;\n    border-width: 1px 0;\n    color: #555;\n    font-size: 0.8em;\n    padding: 5px 10px;\n}\n.gh-profile-card .repos a {\n    position: relative;\n    display: block;\n    padding: 7px 10px;\n    font-size: 0.9em;\n    border-top: 1px solid #DDD;\n}\n.gh-profile-card .repos a:first-of-type {\n    border: none;\n}\n.gh-profile-card .repos .repo-name {\n    max-width: 280px;\n    font-weight: bold;\n    text-overflow: ellipsis;\n}\n.gh-profile-card .repos .updated {\n    display: block;\n    font-size: 0.75em;\n    font-style: italic;\n    color: #777;\n}\n.gh-profile-card .repos .star {\n    position: absolute;\n    font-size: 0.9em;\n    right: 0.5em;\n    top: 1.1em;\n    color: #888;\n}\n.gh-profile-card .repos .star::after {\n    content: '\\a0\\2605';\n    font-size: 1.1em;\n    font-weight: bold;\n}\n";
        }
    },
    './index.html': {
        base: '.',
        dependency: [],
        factory: function factory(require, exports, module) {
            Object.defineProperty(exports, "__esModule", {
                value: true
            });
            exports.default = "<template>\n    <div class=\"gh-profile-card\">\n        <div class=\"profile\">\n            <img src=\"${view.avatar_url}\" class=\"avatar\">\n\n            <a target=\"_blank\" href=\"${view.html_url}\" class=\"name\">\n                ${view.name}\n            </a>\n            <div class=\"followMe\">\n                <a target=\"_blank\" href=\"${view.html_url}\" class=\"follow-button\">\n                    Follow @${view.login}\n                </a>\n                <span class=\"followers\">\n                    ${view.followers}\n                </span>\n            </div>\n            <ul class=\"languages\" data-array=\"languages\">\n                <li>${view.name}</li>\n            </ul>\n        </div>\n        <div class=\"repos\">\n            <span class=\"header\">Most popular original repositories</span>\n\n            <div data-array=\"repositories\">\n                <a target=\"_blank\" href=\"${view.html_url}\" title=\"${view.description}\">\n                    <span class=\"repo-name\">\n                        ${view.name}\n                    </span>\n                    <span class=\"updated\">\n                        Updated: ${(new Date( view.updated_at )).toLocaleString()}\n                    </span>\n                    <span class=\"star\">\n                        ${view.star_count}\n                    </span>\n                </a>\n            </div>\n        </div>\n    </div>\n</template>\n";
        }
    },
    './index': {
        base: '.',
        dependency: [],
        factory: function factory(require, exports, module) {
            Object.defineProperty(exports, "__esModule", {
                value: true
            });

            var _webCell = require('web-cell');

            var _index = require('./index.html');

            var _index2 = _interopRequireDefault(_index);

            var _index3 = require('./index.css');

            var _index4 = _interopRequireDefault(_index3);

            function _interopRequireDefault(obj) {
                return obj && obj.__esModule ? obj : { default: obj };
            }

            var GithubProfile = function (_HTMLElement) {
                _inherits(GithubProfile, _HTMLElement);

                function GithubProfile() {
                    var _this;

                    _classCallCheck(this, GithubProfile);

                    (_this = _possibleConstructorReturn(this, (GithubProfile.__proto__ || Object.getPrototypeOf(GithubProfile)).call(this)), _this).buildDOM(_index2.default, _index4.default);
                    return _this;
                }

                _createClass(GithubProfile, [{
                    key: 'connectedCallback',
                    value: function () {
                        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
                            var _this2 = this;

                            var user, view, repos, languages;
                            return regeneratorRuntime.wrap(function _callee2$(_context2) {
                                while (1) {
                                    switch (_context2.prev = _context2.next) {
                                        case 0:
                                            _context2.next = 2;
                                            return fetch('https://api.github.com/users/' + this.user);

                                        case 2:
                                            _context2.next = 4;
                                            return _context2.sent.json();

                                        case 4:
                                            user = _context2.sent;
                                            view = this.view;


                                            view.render(user);

                                            _context2.t0 = GithubProfile;
                                            _context2.next = 10;
                                            return fetch(user.repos_url + '?sort=updated');

                                        case 10:
                                            _context2.next = 12;
                                            return _context2.sent.json();

                                        case 12:
                                            _context2.t1 = _context2.sent;
                                            repos = _context2.t0.filterRepo.call(_context2.t0, _context2.t1);


                                            view.repositories.render(repos);

                                            _context2.next = 17;
                                            return Promise.all(repos.map(function () {
                                                var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(repo) {
                                                    return regeneratorRuntime.wrap(function _callee$(_context) {
                                                        while (1) {
                                                            switch (_context.prev = _context.next) {
                                                                case 0:
                                                                    _context.next = 2;
                                                                    return fetch(repo.languages_url);

                                                                case 2:
                                                                    return _context.abrupt('return', _context.sent.json());

                                                                case 3:
                                                                case 'end':
                                                                    return _context.stop();
                                                            }
                                                        }
                                                    }, _callee, _this2);
                                                }));

                                                return function (_x) {
                                                    return _ref2.apply(this, arguments);
                                                };
                                            }()));

                                        case 17:
                                            languages = _context2.sent;


                                            view.languages.render(GithubProfile.filterTech(languages).slice(0, 8));

                                        case 19:
                                        case 'end':
                                            return _context2.stop();
                                    }
                                }
                            }, _callee2, this);
                        }));

                        function connectedCallback() {
                            return _ref.apply(this, arguments);
                        }

                        return connectedCallback;
                    }()
                }, {
                    key: 'user',
                    get: function get() {
                        return this.getAttribute('user');
                    }
                }, {
                    key: 'repoCount',
                    get: function get() {
                        return this.view.repositories.length;
                    }
                }], [{
                    key: 'filterRepo',
                    value: function filterRepo(list) {

                        return list.map(function (repo) {

                            if (!repo.fork && repo.forks_count + repo.watchers_count + repo.stargazers_count) {
                                delete repo.owner;return repo;
                            }
                        }).filter(Boolean).sort(function (A, B) {
                            return new Date(B.pushed_at) - new Date(A.pushed_at) || B.stargazers_count - A.stargazers_count || B.watchers_count - A.watchers_count || B.forks_count - A.forks_count;
                        });
                    }
                }, {
                    key: 'filterTech',
                    value: function filterTech(list) {

                        var tech = {};

                        var _iteratorNormalCompletion = true;
                        var _didIteratorError = false;
                        var _iteratorError = undefined;

                        try {
                            for (var _iterator = list[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                var item = _step.value;
                                for (var name in item) {

                                    tech[name] = tech[name] || {
                                        name: name,
                                        count: 0
                                    };

                                    tech[name].count += item[name];
                                }
                            }
                        } catch (err) {
                            _didIteratorError = true;
                            _iteratorError = err;
                        } finally {
                            try {
                                if (!_iteratorNormalCompletion && _iterator.return) {
                                    _iterator.return();
                                }
                            } finally {
                                if (_didIteratorError) {
                                    throw _iteratorError;
                                }
                            }
                        }

                        return Object.keys(tech).map(function (name) {
                            return tech[name];
                        }).sort(function (A, B) {
                            return B.count - A.count;
                        });
                    }
                }]);

                return GithubProfile;
            }(HTMLElement);

            exports.default = GithubProfile;
            (0, _webCell.component)(GithubProfile);
        }
    },
    'web-cell': { exports: web_cell }
};

    return require('./index');
});